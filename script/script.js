
window.addEventListener('DOMContentLoaded', () => {

	/* --------------------------------------–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤, –º–∏–Ω–Ω–æ–≥–æ –ø–æ–ª—è –∏ –º–∏–Ω--------------------------------------------------- */

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
	const mine = 16;
	let flags = 0;
	let victory = false;
	const FIELD_SIZE = 14;
    const TOTAL_MINES = 16;

	// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫—É –∏–≥—Ä—ã
	function createGame() {
		createArea();
		createMines();
		showCount();
		startGame();
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–Ω–æ–≥–æ –ø–æ–ª—è
	function createArea() {
		const table = document.createElement('table'),
			tbody = document.createElement('tbody');

		let count = 1;

		for (let i = 0; i < FIELD_SIZE; i++) {
			const tr = document.createElement('tr');
			tbody.append(tr);

			for (let g = 0; g < 14; g++) {
				const td = document.createElement('td');
				td.setAttribute("data-mine", false);
				td.setAttribute("id", count);
				count++;
				tr.append(td);
			}
		}

		table.append(tbody);
		document.querySelector('.game').append(table);
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 10 –º–∏–Ω
	function createMines() {
		const cell = document.querySelectorAll('td');
		const randomCells = [];

		let count = 0;
		while (count < TOTAL_MINES) {
			let randomCell = cell[Math.round(Math.random() * cell.length)];

			if (!randomCells.includes(randomCell)) {
				randomCell.setAttribute("data-mine", true);
				randomCells.push(randomCell);
				count++;
			  }
		}
	}

	// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—á–µ—Ç–∞
	function showCount() {
		const countMines = document.querySelector('.countMines');
		const countFlags = document.querySelector('.countFlags');

		countMines.textContent = mine;
		countFlags.textContent = flags;
	}
	function addButtonNewGame() {
		if (!document.querySelector('.victoryOrLoss button')) {
			const buttonNewGame = document.createElement('button');
			buttonNewGame.classList.add('buttonNewGame');
			document.querySelector('.victoryOrLoss').append(buttonNewGame);

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ"
			buttonNewGame.addEventListener('click', event => {
				document.querySelector('.game table').remove();
				document.querySelector('.victoryOrLoss').textContent = "";
				flags = 0;
				victory = false;
				createGame();
			})
		}
	}

	function startGame() {
		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–ª–∏–∫–∏ –º—ã—à–∏

		document.querySelector('tbody').addEventListener('click', openCell);	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–∫–ª–∏–∫" –õ–ö–ú
		document.querySelector('tbody').addEventListener('contextmenu', addRemoveFlag);	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–∫–ª–∏–∫" –ü–ö–ú

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è "–∫–ª–∏–∫" –õ–ö–ú - "–æ—Ç–∫—Ä—ã—Ç–∏—è" —è—á–µ–µ–∫
		function openCell(event) {
			addButtonNewGame();

			const hasMine = event.target.getAttribute("data-mine") === 'true';
  				if (event.target.getAttribute("data-mine") === 'false') {
    				showEmptyCell(event.target)
    				removeFlag(event);
    				countMineNeighbors(event.target);
  				} else {
    				removeFlag(event);
    				showMine(event);
    				endGame();
  				}
			}

		// –§—É–Ω–∫—Ü–∏—è —Å–æ–±—ã—Ç–∏—è "–∫–ª–∏–∫" –ü–ö–ú - c—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –ü–ö–ú
		function addRemoveFlag(event) {
			event.preventDefault(); // –£–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é (—Ç.–µ. –≤—ã–∑–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é)
			addButtonNewGame();

			const classCell = Array.from(event.target.classList); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–ª–∞—Å—Å–æ–≤ —è—á–µ–π–∫–∏

			// –ï—Å–ª–∏ —è—á–µ–π–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –ø—É—Å—Ç–∞—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
			if (classCell.includes('emptyCell')) {
				return;
			}
			// –ï—Å–ª–∏ –Ω–∞ —è—á–µ–π–∫–µ —É–∂–µ –µ—Å—Ç—å —Ñ–ª–∞–≥ - —É–¥–∞–ª–∏—Ç—å
			const hasFlag = classCell.includes('flagCell');
 				if (hasFlag) {
        		    removeFlag(event);
  				} else if (flags < 10) {
					addFlag(event);
   				}
			}

		// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
		function removeFlag(event) {
			// –ï—Å–ª–∏ —Ñ–ª–∞–≥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É–¥–∞–ª–∏—Ç—å
			if (Array.from(event.target.classList).includes('flagCell')) {
				event.target.classList.remove('flagCell');
				flags--;
			}
			showCount();
		}
		// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
		function addFlag(event) {
			// –ï—Å–ª–∏ —Ñ–ª–∞–≥ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
			if (!(Array.from(event.target.classList).includes('flagCell'))) {
				event.target.classList.add('flagCell');
				flags++;
			}
			showCount();
		}

		// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–∏–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª –Ω–∞ –º–∏–Ω—É
		function showMine(event) {
			event.target.classList.add('mineCell'); // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –º–∏–Ω—ã
			showAllMines()
		}

		// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –º–∏–Ω
		let gameField = null;
		function createArea() {
			gameField = document.createElement('table') 
			const allMines = document
			.querySelectorAll('td[data-mine="true"]')
			.forEach(cell => {
			  cell.classList.remove('flagCell');
			  cell.classList.add('mineCell');
			})
		}

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
		function showEmptyCell(cell) {
			cell.classList.add('emptyCell');
			countOpenEmptyCell()
		}

		// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—Ö –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫
		function countOpenEmptyCell() {
			const allCells = document.querySelectorAll('table td');
			const allEmptyCells = document.querySelectorAll('.emptyCell');

			if (allEmptyCells.length === (allCells.length - mine)) {
				victory = true;
				endGame();
			}
		}

		// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª
		function victoryOrLoss() {
			const victoryOrLoss = document.querySelector('.victoryOrLoss');
			if (victory === true) {
				victoryOrLoss.textContent = 'üòé'
			} else {
				victoryOrLoss.textContent = 'üòµ'
			}
		}

		// –§—É–Ω–∫—Ü–∏—è "–ö–æ–Ω–µ—Ü –∏–≥—Ä—ã"
		function endGame() {
			document.querySelector('tbody').removeEventListener('click', openCell);	// –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è "–∫–ª–∏–∫" –õ–ö–ú
			document.querySelector('tbody').removeEventListener('contextmenu', addRemoveFlag);	// –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è "–∫–ª–∏–∫" –ü–ö–ú
			victoryOrLoss();
			showAllMines();
		}

		/* -----------------------------------------–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ —è—á–µ–π–∫–∞–º–∏--------------------------------------------------------------- */

		// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
		function getNeighbors(cell, far = 1) {

			// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —è—á–µ–π–∫–∏
			function indexOf(element) {
				return Array.prototype.slice.call(element.parentElement.children).indexOf(element);
			}

			// –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —è—á–µ–π–∫–∏
			const row = cell.parentElement;
			// –≤—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ (–æ–±—ã—á–Ω–æ —ç—Ç–æ <table> –∏–ª–∏ <tbody>)
			const wrapper = row.parentElement;

			// –Ω–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∏—Å—Ö–æ–¥–Ω–æ–π —è—á–µ–∫–∏
			const index = [
				indexOf(row), // –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
				indexOf(cell) // –∏–Ω–¥–µ–∫—Å —è—á–µ–π–∫–∏
			];

			// –≤—ã—á–∏—Å–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π "—è—â–∏–∫"
			const bbox = [
				Math.max(index[0] - far, 0), // –∏–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
				Math.max(index[1] - far, 0), // –∏–Ω–¥–µ–∫—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏
				Math.min(index[0] + far, wrapper.children.length - 1), // –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
				Math.min(index[1] + far, row.children.length - 1) // –∏–Ω–¥–µ–∫—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —è—á–µ–π–∫–∏
			];

			// –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
			const list = [];

			// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ bbox
			for (let i = bbox[0]; i < bbox[2] + 1; i++) {
				const sRow = wrapper.children.item(i);

				// –≤ —Ä–∞–º–∫–∞—Ö –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –∏–∑ bbox
				for (let j = bbox[1]; j < bbox[3] + 1; j++) {

					// –µ—Å–ª–∏ —Å–µ–π—á–∞—Å —è—á–µ–π–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—ë
					if (i === index[0] && j === index[1]) {
						continue;
					}
					const sCell = sRow.children.item(j);
					list.push(sCell);
				}
			}
			return list;
		}

		// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –≤–æ–∫—Ä—É–≥ –æ—Ç–∫—Ä—ã—Ç–æ–π —è—á–µ–π–∫–æ–π
		function countMineNeighbors(cell) {
			let countMine = 0; // –°—á–µ—Ç—á–∏–∫ –º–∏–Ω

			const neighbors = getNeighbors(cell); // –ú–∞—Å—Å–∏–≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫

			// –ü–µ—Ä–µ–±–æ—Ä —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–∏–Ω—ã
			neighbors.forEach(elem => {
				if (elem.getAttribute('data-mine') === 'true') {
					countMine++;
				} else if (elem.getAttribute('data-mine') === 'false') {
					if (Array.from(elem.classList).includes('flagCell')) {
						return;
					}
					showEmptyCell(elem);
					emptyNeighbors(elem);
				}
			});

			// –í—ã–≤–æ–¥ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π —è—á–µ–π–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω 
			cell.innerText = countMine;
		}

		// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏ –≤—ã–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω –≤–æ–∫—Ä—É–≥ —Å–æ—Å–µ–¥–Ω–µ–π —è—á–µ–π–∫–∏
		function emptyNeighbors(element) {
			element.innerText = 
			  getNeighbors(element)
			  .filter(element => element.getAttribute('data-mine') === 'true')
			  .length
		  }	
	}
	createGame();
})